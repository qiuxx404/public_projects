<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 加载配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

   <!-- <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="logViolation" value="true"/>
        <property name="throwException" value="false"/>
    </bean>

    &lt;!&ndash; DruidDataSource &ndash;&gt;
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url"                           value="${jdbc.url}"/>
        <property name="username"                      value="${jdbc.username}"/>
        <property name="password"                      value="${jdbc.password}"/>
        <property name="filters"                       value="wall"/>
        <property name="maxActive"                     value="${public.database.maxActive}"/>
        <property name="initialSize"                   value="${public.database.initialSize}"/>
        <property name="minIdle"                       value="${public.database.minIdle}"/>
        <property name="maxWait"                       value="${public.database.maxWait}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${public.database.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${public.database.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery"               value="${public.database.validationQuery}"/>
        <property name="testWhileIdle"                 value="${public.database.testWhileIdle}"/>
        <property name="testOnBorrow"                  value="${public.database.testOnBorrow}"/>
        <property name="testOnReturn"                  value="${public.database.testOnReturn}"/>
        <property name="poolPreparedStatements"        value="${public.database.poolPreparedStatements}"/>
        <property name="maxOpenPreparedStatements"     value="${public.database.maxOpenPreparedStatements}"/>
        <property name="proxyFilters">
            <list>
               &lt;!&ndash; <ref bean="log-filter"/>&ndash;&gt;
                <ref bean="wall-filter"/>
            </list>
        </property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:spring/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:com/qiuxx/common/web/dao/*.xml"/>
    </bean>
    &lt;!&ndash;mybatis 扫描配置&ndash;&gt;
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.qiuxx.common.web.dao"/>
    </bean>
    &lt;!&ndash;事物配置&ndash;&gt;
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>-->


    <!-- ================================================================================================ -->

    <!-- 1 配置c3p0数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
        <property name="minPoolSize" value="${jdbc.minPoolSize}"/>
        <property name="initialPoolSize" value="${jdbc.initalPoolSize}"/>
        <property name="maxStatements" value="${jdbc.statements}"/>
    </bean>
    
    <!--2 配置SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:spring/mybatis-config.xml"/>
        <property name="typeAliasesPackage" value="com.qiuxx.common.web.entity"/>
        <property name="mapperLocations" value="classpath:com/qiuxx/common/web/dao/*.xml"/>
    </bean>

    <!--3 自动扫描mybatis映射文件和接口包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.qiuxx.common.web.dao"/>
    </bean>

    <!--4 配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--5 开启注解进行事务管理   transaction-manager：引用上面定义的事务管理器-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>